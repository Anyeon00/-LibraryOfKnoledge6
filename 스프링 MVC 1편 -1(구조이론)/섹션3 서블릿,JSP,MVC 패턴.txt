[서블릿으로 회원 관리 웹 애플리케이션 만들기]

서블릿으로 요청데이터와 응답데이터 처리 + 비즈니스로직
(서블릿 클래스에서 request객체와 response객체를 이용해)

-> 응답데이터의 html코드 작성이 불편함
-> 웹 템플릿 엔진 사용 _JSP, Thymeleaf


[JSP로 회원 관리 웹 애플리케이션 만들기]

위 서블릿만 사용했을 땐 자바 코드(response객체의 메서드)를 이용해 html을 작성했지만 JSP에선 html에 자바코드를 작성 _ <%  %> 태그사이에
(jsp에 비즈니스로직 삽입)

* JSP로 작성하면, 웹 url에 ~.jsp 로 접속함 (다른 클래스없이 JSP파일만으로 작동)
* JSP는 서버 내부에서 서블릿으로 변환됨

-> JSP를 사용해도 뭔가 불편함, 두가지 일을 한번에 함(비즈니스 로직, view 렌더링)
-> 두가지 일을 분리 : MVC패턴



[MVC 패턴 - 개요]
하나의 서블릿이나, JSP로 처리하던 걸 Controller와 View로 나눔

Controller : HTTP 요청을 받아 파라미터 검증, 비즈니스로직 실행, 데이터를 Model에 담아 View로 전달(정확하게, 비즈니스로직은 Service를 호출해 처리)
Model : View에 출력할 데이터를 담아둠 _Controller와 View가 공유하는 데이터 통
View : Model에 담긴 데이터를 사용해 화면을 그림

* Model은 request객체 사용, request메서드로 접근가능
* Model은 자료구조 Map사용

[MVC 패턴 - 적용]

1. 서블릿 클래스에서 HTTP요청을 받아 파라미터 검증, 비즈니스로직 실행, 
2. 모델에 데이터 저장(request.setAttribute("key", value)), 
3. View호출(request, response를 parameter로 JSP호출메서드)

=>한계 : 아직도 일련적으로 반복되는 코드들이 많음
(jsp호출하는 코드들, 등등...)

[MVC 패턴 - 한계]

위의 한계에 따라 컨트롤러 호출 전에 공통 기능을 처리하도록
-> 프론트 컨트롤러 패턴(수문장역할, 입구를 하나로)
* 이게 스프링 MVC의 핵심
* 자세내용은 다음 장























