필터 - 서블릿, 인터셉터 - 스프링 제공
둘이 비슷한 기능, 
적용되는 순서, 범위, 사용방법이 다름

공통 요구 사항 : 
- 로그인 여부 체크(인증)

[서블릿 필터 - 소개]
흐름:
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러	//로그인 사용자
HTTP 요청 -> WAS -> 필터(비승인, 서블릿 호출X)		//비 로그인 사용자

* 인증시 추가 공통 요구 사항 : 모든 고객의 요청 로그를 남기는 요구사항이 있다면 필터를 사용하면 된다, 또는 로그인을 체크하는 요구사항도 마찬가지
* 특정 URL 패턴에 적용 가능 : 즉, 특정 url 하위 계층에 모두 적용 가능 ex) /*
* 필터 체인 :  필터를 여러개 연달아 추가 가능 ex) 로그를 남기는 필터 - 로그인 여부 체크 필터

필터 인터페이스 소개
init() : 필터 초기화 메서드
doFilter() : 필터의 메인 로직	
destroy() : 필터 종료 메서드
* 싱글톤 객체임
* javax.servlet.Filter


[서블릿 필터 - 인증 체크]
1. 필터 인터페이스 구현하기
- doFilter()만 구현하면 됨


2. Configuration클래스 생성후 필터 구현체를 빈으로 등록


쓸거면 강의 다시 참고


[스프링 인터셉터 - 소개]
흐름:
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러 //로그인 사용자
HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터(비승인, 서블릿 호출X) //비로그인 사용자

* 인터셉터가 훨씬 더 많은 기능 제공, 좋음

다음 중 필요한 것 오버라이딩
preHandle() : 컨트롤러 호출전에 호출 (true가 return되면 다음으로 진행, or 종료)
postHandle() : 컨틀롤러 호출후에 호출
afterCompletion : 뷰가 렌더링 된 후(완전히 응답이 나간후) 호출
* 컨트롤러에서 예외가 터지면 postHandle()이 호출되지않고, afterCompletion()이 호출됨


[스프링 인터셉터 - 인증 체크]

1. HanlderInterceptor구현 인터셉터 클래스 작성
- preHandle() 오버라이딩

2. Configuration클래스 생성
- WebMvcConfigurer을 implements
- addInterceptors() 오버라이딩으로 인터셉터 등록
ex) registry.addInterceptor(new LoginCheckInterceptor())


[ArgumentResolver 활용]



=> 인터셉터 : 스프링 MVC구조에 특화된 필터
꼭 필터를 사용해야하는 상황이 아니면 인터셉터를 쓰는게 더 편리함


=> 세션만들고 쿠키만들고 필터만들고 인터셉트? 이거 다 해줘야하는데
그냥 스프링 시큐리티 쓰는게 맞는듯? + 예외처리만 해주면 될듯
