[9 JWT 발급 및 검증 클래스]

로그인 - 성공 - JWT 발급
url 경로 접근시 - JWT 검증
-> 발급과 검증해주는 클래스 작성

1. 암호화 키 저장
암호화 키는 하드코딩으로 탑재를 지양하므로, 변수 설정 파일에 저장
ex) application.yml에서
spring:
  jwt:
    secret: vmfhaltmskdlstkfkdgodyroqkfwkdbalroqkfwkdbalaaaaaaaaaaaaaaaabbbbb
-- spring.jwt.secret 이란 변수명은 임의로 설정한 것(기본 스프링 변수랑 안겹치게 알아서)
-- 암호 길이 256bit 안에서 최대한 길게

2. JWTUtil 클래스 작성 _JWT3-2 코드 자료 참고 (0.12.3버전 기준)
- jwt패키지
- @Component

* 토큰 Payload에 저장될 정보
: username, role, 생성일, 만료일

- Constructor
: 암호화 키를 받아서 객체 타입으로 저장

- 토큰 생성 메서드

- 토큰 검증 메서드 3개
: username 검증 메서드, role 검증 메서드, 만료일 검증 메서드


[10 로그인 성공 JWT 발급] 

LoginFilter 클래스의 successfulAuthentication메서드 구현
(로그인 성공 시, JWT 토큰 발행 후 응답)

- SecurityConfig 클래스, LoginFilter 클래스에서 JWTUtil 객체 데이터 멤버로 주입
ex) private final JWTUtil jwtUtil;

- SecurityConfig 클래스의 addFilter 메서드 파라미터에 JWTUtil 추가
ex)
http.addFilterAt(new LoginFilter(authenticationManager(authenticationConfiguration), jwtUtil), UsernamePasswordAuthenticationFilter.class);

- successfulAuthentication메서드 구현
* 로그인 성공 시, JWT 토큰 발행 후 응답
ex) 메서드 바디에서
CustomUserDetails customUserDetails = (CustomUserDetails) authResult.getPrincipal();

String username = customUserDetails.getUsername();

Collection<? extends GrantedAuthority> authorities = authResult.getAuthorities();
Iterator<? extends GrantedAuthority> iterator = authorities.iterator();
GrantedAuthority auth = iterator.next();
String role = auth.getAuthority();

String token = jwtUtil.createJwt(username, role, 60 * 60 * 10L);  //유저아이디, 권한, 만료기간

//토큰이므로 헤더에 담음
response.addHeader("Authorization", "Bearer " + token);  //key, 토큰

- unsuccessfulAuthentication메서드 구현
* 로그인 실패시 401 응답 코드 반환
ex) 메서드 바디에서
response.setStatus(401);




* Postman으로 로그인 테스트
body - form-data
key는 username과 password




