[요청 매핑]
url요청이 왔을때 어떤 컨트롤러가 호출되는가를 매핑
(단순 url로만이 아니라 여러가지를 조합)

1. 컨트롤러 종류
@Controller
: 메서드에서 String을 return하면 뷰의 논리이름으로 사용해, 뷰를 찾아 렌더링함
@RestController
: 메서드에서 String을 return하면 (JSON형식으로)HTTP메시지 바디에 넣음
*@ResponseBody
: @Controller클래스의 메서드단위에 달아주면, 해당 메서드만 @RestController처럼 적용

2. HTTP요청 매핑 메서드 종류
@RequestMapping("/~")
- 어노테이션 속성으로 url을 넣으면 해당 url요청과 이 메서드가 매핑됨
- 어노테이션 속성으로 method를 지정하지 않으면 GET, POST, PUT, DELETE, ... 모두 호출됨
(method 속성 지정 예시: (method = RequestMethod.GET)
-> @RequestMapping에 속성을 지정하는 대신 아래의 어노테이션으로 대체 가능
@GetMapping
@PostMapping
@PutMapping
@DeleteMapping
@PatchMapping

3. PathVariable(경로변수) 사용
: url경로에 변수 사용
ex)
@GetMapping("/mapping/{userId}")
public String mappingPath(@PathVariable("userId") String data){
  System.out.println(data);
  log.info("userId={}, data);  //위 print함수 대신 사용, 섹션6-1 로깅 참고
  return "ok";
}
- url의 {userId}가 변수로 사용됨 ex) /mapping/seluo65
- 파라미터에서 @PathVariable어노테이션으로 해당 변수를 뽑아낼 수 있음
- 경로변수와 파라미터변수 이름이 같으면 @PathVariable속성 생략 가능
ex) (@PathVariable String userId)
- 다중 사용 가능 
ex) /mapping/users/{userId}/orders/{orderId}

4. 매핑메서드 어노테이션의 기타 속성들
@RequestMapping같은 어노테이션의 속성들
-1. headers = "mode"	// HTTP 헤더에 조건을 추가해서, 해당하는 경우에만 호출됨
-2. consumes = "application/json"  //HTTP 헤더의 Content-Type이 조건, 해당하는 경우에만 호출됨
-3. produces = "text/html"  //HTTP 헤더의 Accept가 조건 _HTTP강의-섹션7참고 
* 예시들은 해당 강의 pdf자료 참고
* -2, -3은 MediaType클래스의 static member이용



[요청 매핑 - API 예시]
회원 관리를 HTTP API로 만드는 예시(URL 매핑만)

회원 목록 조회 : 	GET 		"/users"
회원 등록 : 		POST 		"/users"
회원 조회 : 		GET 		"/users/{userId}
회원 수정 : 		PATCH 	"/users/{userId}
회원 삭제 : 		DELETE 	"/users/{userId}

ex)
@GetMapping("/mapping/users")
public String user() {
  return "get users";
}

@PostMapping("/mapping/users")
public String addUser() {
  return "post user";
}

@GetMapping("/mapping/users/{userId}")
public String findUser(@PathVariable String userId) {
  return "get userId=" + userId;
}

@PatchMapping("/mapping/users/{userId}")
public String updateUser(@PathVariable String userId) {
  return "update userId=" + userId;
}

@DeleteMapping("/mapping/users/{userId}")
public String deleteUser(@PathVariable String userId) {
  return "delete userId=" + userId;
}

* url 계층 통합
: @RequestMapping("/mapping/users")를 클래스단위에 써주면,
이 클래스의 메서드의 url에는 그 하위 주소만 작성하면 됨
ex) @DeleteMapping("/{userId}")


